/* valadoc-1.0.vapi generated by valac 0.32.1, do not modify. */

namespace Valadoc {
	namespace Api {
		/**
		 * Represents an array declaration.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Array : Valadoc.Api.Item {
			public Array (Valadoc.Api.Item parent, void* data);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * The element type.
			 */
			public Valadoc.Api.Item data_type { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Attribute : Valadoc.Api.Item {
			public Attribute (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, void* data);
			public Valadoc.Api.AttributeArgument add_boolean (string name, bool value, void* data = null);
			public Valadoc.Api.AttributeArgument add_double (string name, double value, void* data = null);
			public Valadoc.Api.AttributeArgument add_integer (string name, int value, void* data = null);
			public Valadoc.Api.AttributeArgument add_string (string name, string value, void* data = null);
			protected override Valadoc.Content.Inline build_signature ();
			public Valadoc.Api.AttributeArgument? get_argument (string name);
			public Valadoc.Api.SourceFile get_source_file ();
			public string name { get; private set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class AttributeArgument : Valadoc.Api.Item {
			public enum Type {
				BOOLEAN,
				INTEGER,
				DOUBLE,
				STRING
			}
			public AttributeArgument.boolean (Valadoc.Api.Attribute parent, Valadoc.Api.SourceFile file, global::string name, bool value, void* data);
			protected override Valadoc.Content.Inline build_signature ();
			public AttributeArgument.double (Valadoc.Api.Attribute parent, Valadoc.Api.SourceFile file, global::string name, global::double value, void* data);
			public Valadoc.Api.SourceFile get_source_file ();
			public bool get_value_as_boolean ();
			public global::double get_value_as_double ();
			public int get_value_as_integer ();
			public global::string get_value_as_string ();
			public AttributeArgument.integer (Valadoc.Api.Attribute parent, Valadoc.Api.SourceFile file, global::string name, int value, void* data);
			public AttributeArgument.string (Valadoc.Api.Attribute parent, Valadoc.Api.SourceFile file, global::string name, global::string value, void* data);
			public Valadoc.Api.AttributeArgument.Type argument_type { get; private set; }
			public global::string name { get; private set; }
			public global::string value { get; private set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class ChildSymbolRegistrar : Valadoc.Api.Visitor {
			public ChildSymbolRegistrar ();
			/**
			 * {@inheritDoc}
			 */
			public override void visit_class (Valadoc.Api.Class item);
			/**
			 * {@inheritDoc}
			 */
			public override void visit_interface (Valadoc.Api.Interface item);
			/**
			 * {@inheritDoc}
			 */
			public override void visit_namespace (Valadoc.Api.Namespace item);
			/**
			 * {@inheritDoc}
			 */
			public override void visit_package (Valadoc.Api.Package item);
			/**
			 * {@inheritDoc}
			 */
			public override void visit_property (Valadoc.Api.Property item);
			/**
			 * {@inheritDoc}
			 */
			public override void visit_struct (Valadoc.Api.Struct item);
			/**
			 * {@inheritDoc}
			 */
			public override void visit_tree (Valadoc.Api.Tree item);
		}
		/**
		 * Represents a class declaration.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Class : Valadoc.Api.TypeSymbol {
			public Class (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, string? private_cname, string? class_macro_name, string? type_macro_name, string? is_type_macro_name, string? type_cast_macro_name, string? type_function_name, string? class_type_macro_name, string? is_class_type_macro_name, string? dbus_name, string? type_id, string? param_spec_function_name, string? ref_function_name, string? unref_function_name, string? free_function_name, string? finalize_function_name, string? take_value_function_cname, string? get_value_function_cname, string? set_value_function_cname, bool is_fundamental, bool is_abstract, bool is_basic_type, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			public void add_interface (Valadoc.Api.TypeReference iface);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Gets the name of the GType macro which returns the class struct.
			 */
			public string get_class_macro_name ();
			/**
			 * Gets the name of the GType macro which returns the type of the class.
			 */
			public string get_class_type_macro_name ();
			/**
			 * Returns the name of this class as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * Returns the dbus-name.
			 */
			public string? get_dbus_name ();
			/**
			 * Returns the C function name that finalizes the
			 * instances of this data type.
			 *
			 * @return the name of the C function or null
			 */
			public string? get_finalize_function_name ();
			/**
			 * Returns the C function name that frees the
			 * instances of this data type.
			 *
			 * @return the name of the C function or null
			 */
			public string? get_free_function_name ();
			/**
			 * Returns a list of all implemented interfaces.
			 *
			 * @see get_implemented_interface_list
			 */
			public Gee.Collection<Valadoc.Api.TypeReference> get_full_implemented_interface_list ();
			/**
			 * Returns the cname of the GValue getter function.
			 */
			public string? get_get_value_function_cname ();
			/**
			 * Returns a list of all newly implemented interfaces.
			 *
			 * @see get_full_implemented_interface_list
			 */
			public Gee.Collection<Valadoc.Api.TypeReference> get_implemented_interface_list ();
			/**
			 * Gets the name of the GType macro which returns whether a class instance is of a given type.
			 */
			public string get_is_class_type_macro_name ();
			/**
			 * Returns a list of all known classes based on this class
			 */
			public Gee.Collection<Valadoc.Api.Class> get_known_child_classes ();
			/**
			 * Returns a list of all known interfaces based on this class
			 */
			public Gee.Collection<Valadoc.Api.Interface> get_known_derived_interfaces ();
			/**
			 * Returns the cname of the GValue parameter spec function.
			 */
			public string? get_param_spec_function_cname ();
			/**
			 * Returns the name of this class' private data structure as it is used in C.
			 */
			public string? get_private_cname ();
			/**
			 * Returns the C function name that increments the reference count of
			 * instances of this data type.
			 *
			 * @return the name of the C function or null if this data type does not
			 *         support reference counting
			 */
			public string? get_ref_function_cname ();
			/**
			 * Returns the cname of the GValue setter function.
			 */
			public string? get_set_value_function_cname ();
			/**
			 * Returns the cname of the GValue taker function.
			 */
			public string? get_take_value_function_cname ();
			/**
			 * Returns the C symbol representing the runtime type id for this data type.
			 */
			public string? get_type_id ();
			/**
			 * Returns the C function name that decrements the reference count of
			 * instances of this data type.
			 *
			 * @return the name of the C function or null if this data type does not
			 *         support reference counting
			 */
			public string? get_unref_function_cname ();
			public void register_child_class (Valadoc.Api.Class cl);
			public void register_derived_interface (Valadoc.Api.Interface iface);
			/**
			 * Specifies the base class.
			 */
			public Valadoc.Api.TypeReference? base_type { get; set; }
			/**
			 * Specifies whether this class is abstract.
			 */
			public bool is_abstract { get; private set; }
			public bool is_compact { get; }
			/**
			 * Specifies whether this class is fundamental.
			 */
			public bool is_fundamental { get; private set; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents a type member with a constant value.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Constant : Valadoc.Api.Member {
			public Constant (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this constant as it is used in C.
			 */
			public string get_cname ();
			/**
			 * The data type of this constant.
			 */
			public Valadoc.Api.TypeReference constant_type { get; set; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents a Delegate.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Delegate : Valadoc.Api.TypeSymbol, Valadoc.Api.Callable {
			public Delegate (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, bool is_static, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this delegate as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * Specifies whether this delegate is static
			 */
			public bool is_static { get; private set; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents an enum declaration.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Enum : Valadoc.Api.TypeSymbol {
			public Enum (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, string? type_macro_name, string? type_function_name, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this enum as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents an enum member.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class EnumValue : Valadoc.Api.Symbol {
			public EnumValue (Valadoc.Api.Enum parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SourceComment? comment, string? cname, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this enum value as it is used in C.
			 */
			public string get_cname ();
			public Valadoc.Content.Run default_value { get; set; }
			/**
			 * Specifies whether the parameter has a default value
			 */
			public bool has_default_value { get; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents an errordomain member in the source code.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class ErrorCode : Valadoc.Api.Symbol {
			public ErrorCode (Valadoc.Api.ErrorDomain parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SourceComment? comment, string? cname, string? dbus_name, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this class as it is used in C.
			 */
			public string get_cname ();
			/**
			 * Returns the dbus-name.
			 */
			public string get_dbus_name ();
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents an error domain declaration.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class ErrorDomain : Valadoc.Api.TypeSymbol {
			public ErrorDomain (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, string? quark_macro_name, string? quark_function_name, string? dbus_name, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this errordomain as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * Returns the dbus-name.
			 */
			public string? get_dbus_name ();
			/**
			 * Gets the name of the quark() function which represents the error domain
			 */
			public string get_quark_function_name ();
			/**
			 * Gets the name of the quark macro which represents the error domain
			 */
			public string get_quark_macro_name ();
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents a field.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Field : Valadoc.Api.Member {
			public Field (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, bool is_static, bool is_volatile, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this field as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * The field type.
			 *
			 * @return The field type or null for void
			 */
			public Valadoc.Api.TypeReference? field_type { get; set; }
			/**
			 * Specifies whether the field is static.
			 */
			public bool is_static { get; private set; }
			/**
			 * Specifies whether the field is volatile.
			 */
			public bool is_volatile { get; private set; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents a formal parameter in method, signal and delegate signatures.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class FormalParameter : Valadoc.Api.Symbol {
			public FormalParameter (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string? name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.FormalParameterType type, bool ellipsis, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			public Valadoc.Content.Run default_value { get; set; }
			/**
			 * Specifies whether the methods accepts a variable number of arguments
			 */
			public bool ellipsis { get; private set; }
			/**
			 * Specifies whether the parameter has a default value
			 */
			public bool has_default_value { get; }
			/**
			 * Specifies whether the parameter direction is out
			 */
			public bool is_out { get; }
			/**
			 * Specifies whether the parameter direction is ref
			 */
			public bool is_ref { get; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
			/**
			 * The parameter type.
			 *
			 * @return The parameter type or null for void
			 */
			public Valadoc.Api.TypeReference? parameter_type { get; set; }
		}
		/**
		 * A documentation comment used by valadoc
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class GirSourceComment : Valadoc.Api.SourceComment {
			public GirSourceComment (string content, Valadoc.Api.SourceFile file, int first_line, int first_column, int last_line, int last_column);
			public void add_parameter_content (string param_name, Valadoc.Api.SourceComment comment);
			public Valadoc.Api.SourceComment? get_parameter_comment (string param_name);
			public Gee.MapIterator<string,Valadoc.Api.SourceComment> parameter_iterator ();
			public Valadoc.Api.SourceComment? deprecated_comment { get; set; }
			public string? instance_param_name { get; set; }
			public Valadoc.Api.SourceComment? return_comment { get; set; }
			public Valadoc.Api.SourceComment? stability_comment { get; set; }
			public Valadoc.Api.SourceComment? version_comment { get; set; }
		}
		/**
		 * Represents a interface declaration in the source code.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Interface : Valadoc.Api.TypeSymbol {
			public Interface (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, string? type_macro_name, string? is_type_macro_name, string? type_cast_macro_name, string? type_function_name, string interface_macro_name, string? dbus_name, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * Add a newpreconditioned interface to the list
			 */
			public void add_interface (Valadoc.Api.TypeReference iface);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this interface as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * Returns the dbus-name.
			 */
			public string? get_dbus_name ();
			/**
			 * Returns a list of all preconditioned interfaces
			 */
			public Gee.Collection<Valadoc.Api.TypeReference> get_full_implemented_interface_list ();
			/**
			 * Returns a list of newly preconditioned interfaces
			 */
			public Gee.Collection<Valadoc.Api.TypeReference> get_implemented_interface_list ();
			/**
			 * Gets the name of the GType macro which returns the interface struct.
			 */
			public string get_interface_macro_name ();
			/**
			 * Returns a list of all known implementations of this interface
			 */
			public Gee.Collection<Valadoc.Api.Class> get_known_implementations ();
			/**
			 * Returns a list of all known related (sub-)interfaces
			 */
			public Gee.Collection<Valadoc.Api.Interface> get_known_related_interfaces ();
			public void register_implementation (Valadoc.Api.Class cl);
			public void register_related_interface (Valadoc.Api.Interface iface);
			/**
			 * A preconditioned class or null
			 */
			public Valadoc.Api.TypeReference? base_type { get; set; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents a node in the api tree.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class Item : GLib.Object {
			public Item (void* data);
			protected abstract Valadoc.Content.Inline build_signature ();
			public void* data { get; private set; }
			/**
			 * The parent of this item.
			 */
			public Valadoc.Api.Item parent { get; protected set; }
			/**
			 * The signature of this item.
			 */
			public Valadoc.Content.Inline signature { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class Member : Valadoc.Api.Symbol {
			public Member (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, void* data);
		}
		/**
		 * Represents a function or a method.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Method : Valadoc.Api.Member, Valadoc.Api.Callable {
			public Method (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, string? dbus_name, string? dbus_result_name, string? finish_function_cname, Valadoc.MethodBindingType binding_type, bool is_yields, bool is_dbus_visible, bool is_constructor, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this method as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * Returns the dbus-name.
			 */
			public string get_dbus_name ();
			public string get_dbus_result_name ();
			/**
			 * Returns the name of the finish function as it is used in C.
			 */
			public string? get_finish_function_cname ();
			/**
			 * Specifies the virtual or abstract method this method overrides.
			 */
			public Valadoc.Api.Method? base_method { get; set; }
			/**
			 * Specifies whether this method is abstract
			 */
			public bool is_abstract { get; }
			/**
			 * Specifies whether this method is a creation method
			 */
			public bool is_constructor { get; private set; }
			/**
			 * Specifies whether this method is visible for dbus
			 */
			public bool is_dbus_visible { get; private set; }
			/**
			 * Specifies whether this method is inline
			 */
			public bool is_inline { get; }
			/**
			 * Specifies whether this method overrides another one
			 */
			public bool is_override { get; }
			/**
			 * Specifies whether this method is static
			 */
			public bool is_static { get; }
			/**
			 * Specifies whether this method is virtual
			 */
			public bool is_virtual { get; }
			/**
			 * Specifies whether this method is asynchronous
			 */
			public bool is_yields { get; private set; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents a namespace declaration.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Namespace : Valadoc.Api.Symbol {
			public Namespace (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string? name, Valadoc.Api.SourceComment? comment, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * {@inheritDoc}
			 */
			public override bool is_browsable (Valadoc.Settings settings);
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents a node in the api tree.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class Node : Valadoc.Api.Item, Valadoc.Api.Browsable, Valadoc.Documentation, Gee.Comparable<Valadoc.Api.Node> {
			protected bool do_document;
			public Node (Valadoc.Api.Node? parent, Valadoc.Api.SourceFile? file, string? name, void* data);
			/**
			 * Visits this node with the specified Visitor.
			 *
			 * @param visitor the visitor to be called while traversing
			 */
			public abstract void accept (Valadoc.Api.Visitor visitor);
			/**
			 * Visits all children of this node with the specified Visitor.
			 *
			 * @param visitor the visitor to be called while traversing
			 * @param filtered specifies whether nodes which are not browsable should appear in the list
			 */
			public void accept_all_children (Valadoc.Api.Visitor visitor, bool filtered = true);
			/**
			 * Visits all children of this node with the given types with the specified Visitor.
			 *
			 * @param types a list of node types
			 * @param visitor the visitor to be called while traversing
			 * @param filtered specifies whether nodes which are not browsable should appear in the list
			 */
			public void accept_children (Valadoc.Api.NodeType[] types, Valadoc.Api.Visitor visitor, bool filtered = true);
			/**
			 * Visits all children of this node with the given type with the specified Visitor.
			 *
			 * @param type a node type
			 * @param visitor the visitor to be called while traversing
			 * @param filtered specifies whether nodes which are not browsable should appear in the list
			 */
			public void accept_children_by_type (Valadoc.Api.NodeType type, Valadoc.Api.Visitor visitor, bool filtered = true);
			public void add_child (Valadoc.Api.Symbol child);
			public Valadoc.Api.Node? find_by_name (string name);
			/**
			 * Returns a list of all children with the given type.
			 *
			 * @param type a node type
			 * @param filtered specifies whether nodes which are not browsable should appear in the list
			 */
			public Gee.List<Valadoc.Api.Node> get_children_by_type (Valadoc.Api.NodeType type, bool filtered = true);
			/**
			 * Returns a list of all children with the given types.
			 *
			 * @param types a list of node types
			 * @param filtered specifies whether nodes which are not browsable should appear in the list
			 */
			public Gee.List<Valadoc.Api.Node> get_children_by_types (Valadoc.Api.NodeType[] types, bool filtered = true);
			/**
			 * Returns canonicalized absolute name (GLib.FileStream for instance)
			 */
			public string? get_full_name ();
			public Valadoc.Api.SourceFile get_source_file ();
			/**
			 * Specifies whether this node has at least one child with the given types
			 *
			 * @param types a list of node types
			 */
			public bool has_children (Valadoc.Api.NodeType[] types);
			/**
			 * Specifies whether this node has at least one child with the given type
			 *
			 * @param type a node type
			 */
			public bool has_children_by_type (Valadoc.Api.NodeType type);
			/**
			 * Specifies whether this node has at least one visible child
			 */
			public bool has_visible_children (Valadoc.Settings settings);
			/**
			 * Specifies whether this node has at least one visible child with the given type
			 *
			 * @param type a node type
			 */
			public bool has_visible_children_by_type (Valadoc.Api.NodeType type, Valadoc.Settings settings);
			/**
			 * Specifies whether this node has at least one visible child with the given types
			 *
			 * @param types a list of node types
			 */
			public bool has_visible_children_by_types (Valadoc.Api.NodeType[] types, Valadoc.Settings settings);
			/**
			 * {@inheritDoc}
			 */
			public abstract bool is_browsable (Valadoc.Settings settings);
			public Valadoc.Content.Comment? documentation { get; internal set; }
			/**
			 * The name of the node
			 */
			public string? name { get; private set; }
			/**
			 * Returns the type of this node
			 */
			public abstract Valadoc.Api.NodeType node_type { get; }
			/**
			 * The corresponding namespace
			 */
			public Valadoc.Api.Namespace? nspace { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Package : Valadoc.Api.Node {
			public Package (string name, bool is_package, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			public Gee.Collection<Valadoc.Api.Package> get_dependency_list ();
			public Gee.Map<string?,Gee.Collection<Valadoc.Api.Symbol>> get_deprecated_symbols ();
			/**
			 * Returns a list with all dependencies
			 */
			public Gee.Collection<Valadoc.Api.Package> get_full_dependency_list ();
			/**
			 * {@inheritDoc}
			 */
			public override bool is_browsable (Valadoc.Settings settings);
			/**
			 * Specifies whether this package is a dependency
			 */
			public bool is_package { get; private set; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents a pointer declaration.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Pointer : Valadoc.Api.Item {
			public Pointer (Valadoc.Api.Item parent, void* data);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * The type the pointer is referring to.
			 */
			public Valadoc.Api.Item data_type { get; set; }
		}
		/**
		 * Represents a property declaration.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Property : Valadoc.Api.Member {
			public Property (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, string? dbus_name, bool is_dbus_visible, Valadoc.Api.PropertyBindingType binding_type, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this method as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * Returns the dbus-name.
			 */
			public string get_dbus_name ();
			/**
			 * Specifies the virtual or abstract property this property overrides.
			 */
			public Valadoc.Api.Property base_property { get; set; }
			public Valadoc.Api.PropertyAccessor? getter { get; internal set; }
			/**
			 * Specifies whether the property is abstract.
			 */
			public bool is_abstract { get; }
			/**
			 * Specifies whether the property is visible.
			 */
			public bool is_dbus_visible { get; private set; }
			/**
			 * Specifies whether the property is override.
			 */
			public bool is_override { get; }
			/**
			 * Specifies whether the property is virtual.
			 */
			public bool is_virtual { get; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
			/**
			 * The property type.
			 *
			 * @return The property type or null for void
			 */
			public Valadoc.Api.TypeReference? property_type { get; set; }
			public Valadoc.Api.PropertyAccessor? setter { get; internal set; }
		}
		/**
		 * Represents a get or set accessor of a property.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class PropertyAccessor : Valadoc.Api.Symbol {
			public PropertyAccessor (Valadoc.Api.Property parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, string? cname, Valadoc.Api.PropertyAccessorType type, Valadoc.Api.Ownership ownership, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this property accessor as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * Specifies whether this accessor may be used to construct the property.
			 */
			public bool is_construct { get; }
			/**
			 * Specifies whether this accessor is a getter.
			 */
			public bool is_get { get; }
			/**
			 * Specifies whether the property is owned.
			 */
			public bool is_owned { get; }
			/**
			 * Specifies whether this accessor is a setter.
			 */
			public bool is_set { get; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents an signal.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Signal : Valadoc.Api.Member, Valadoc.Api.Callable {
			public Signal (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, string? default_impl_cname, string? dbus_name, bool is_dbus_visible, bool is_virtual, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this signal as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * Returns the dbus-name.
			 */
			public string get_dbus_name ();
			public string? get_default_impl_cname ();
			/**
			 * Specifies whether this signal is visible for dbus
			 */
			public bool is_dbus_visible { get; private set; }
			/**
			 * Specifies whether this signal is virtual
			 */
			public bool is_virtual { get; private set; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Builds up a signature from the given items.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class SignatureBuilder {
			/**
			 * Creates a new SignatureBuilder
			 */
			public SignatureBuilder ();
			/**
			 * Adds text onto the end of the builder. 
			 *
			 * @param text a string
			 * @param spaced add a space at the front of the string if necessary
			 * @return this
			 */
			public Valadoc.Api.SignatureBuilder append (string text, bool spaced = true);
			/**
			 * Adds text onto the end of the builder. 
			 *
			 * @param text a string
			 * @param spaced add a space at the front of the string if necessary
			 * @return this
			 */
			public Valadoc.Api.SignatureBuilder append_attribute (string text, bool spaced = true);
			/**
			 * Adds a Inline onto the end of the builder. 
			 *
			 * @param content a content
			 * @param spaced add a space at the front of the inline if necessary
			 * @return this
			 */
			public Valadoc.Api.SignatureBuilder append_content (Valadoc.Content.Inline content, bool spaced = true);
			/**
			 * Adds highlighted text onto the end of the builder. 
			 *
			 * @param text a string
			 * @param spaced add a space at the front of the string if necessary
			 * @return this
			 */
			public Valadoc.Api.SignatureBuilder append_highlighted (string text, bool spaced = true);
			/**
			 * Adds a keyword onto the end of the builder. 
			 *
			 * @param keyword a keyword
			 * @param spaced add a space at the front of the keyword if necessary
			 * @return this
			 */
			public Valadoc.Api.SignatureBuilder append_keyword (string keyword, bool spaced = true);
			/**
			 * Adds a literal onto the end of the builder. 
			 *
			 * @param literal a literal
			 * @param spaced add a space at the front of the literal if necessary
			 * @return this
			 */
			public Valadoc.Api.SignatureBuilder append_literal (string literal, bool spaced = true);
			/**
			 * Adds a symbol onto the end of the builder. 
			 *
			 * @param node a node
			 * @param spaced add a space at the front of the node if necessary
			 * @return this
			 */
			public Valadoc.Api.SignatureBuilder append_symbol (Valadoc.Api.Node node, bool spaced = true);
			/**
			 * Adds a type onto the end of the builder. 
			 *
			 * @param node a node
			 * @param spaced add a space at the front of the node if necessary
			 * @return this
			 */
			public Valadoc.Api.SignatureBuilder append_type (Valadoc.Api.Node node, bool spaced = true);
			/**
			 * Adds a type name onto the end of the builder. 
			 *
			 * @param name a type name
			 * @param spaced add a space at the front of the type name if necessary
			 * @return this
			 */
			public Valadoc.Api.SignatureBuilder append_type_name (string name, bool spaced = true);
			/**
			 * The content
			 */
			public new Valadoc.Content.Run @get ();
		}
		/**
		 * A documentation comment used by valadoc
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class SourceComment {
			public SourceComment (string content, Valadoc.Api.SourceFile file, int first_line, int first_column, int last_line, int last_column);
			/**
			 * The text describing the referenced source code.
			 */
			public string content { get; private set; }
			public Valadoc.Api.SourceFile file { get; private set; }
			/**
			 * The first column number of the referenced source code.
			 */
			public int first_column { get; private set; }
			/**
			 * The first line number of the referenced source code.
			 */
			public int first_line { get; private set; }
			/**
			 * The last column number of the referenced source code.
			 */
			public int last_column { get; private set; }
			/**
			 * The last line number of the referenced source code.
			 */
			public int last_line { get; private set; }
		}
		/**
		 * Represents a source file
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class SourceFile : GLib.Object {
			public SourceFile (Valadoc.Api.Package package, string relative_path, string? relative_c_path, void* data);
			public string get_name ();
			public void* data { get; private set; }
			public Valadoc.Api.Package package { get; private set; }
			public string? relative_c_path { get; private set; }
			public string relative_path { get; private set; }
		}
		/**
		 * Represents a struct declaration.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Struct : Valadoc.Api.TypeSymbol {
			public Struct (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? cname, string? type_macro_name, string? type_function_name, string? type_id, string? dup_function_cname, string? copy_function_cname, string? destroy_function_cname, string? free_function_cname, bool is_basic_type, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			/**
			 * Returns the name of this struct as it is used in C.
			 */
			public string? get_cname ();
			/**
			 * Returns the C function name that copies instances of this data
			 * type.
			 */
			public string? get_copy_function_cname ();
			/**
			 * Returns the C function name that destroys instances of this data type.
			 */
			public string? get_destroy_function_cname ();
			/**
			 * Returns the C function name that duplicates instances of this data
			 * type.
			 */
			public string? get_dup_function_cname ();
			/**
			 * Returns the C function name that frees instances of this data type.
			 */
			public string? get_free_function_cname ();
			/**
			 * Returns a list of all known structs based on this struct
			 */
			public Gee.Collection<Valadoc.Api.Struct> get_known_child_structs ();
			/**
			 * Returns the C symbol representing the runtime type id for this data type.
			 */
			public string? get_type_id ();
			public void register_child_struct (Valadoc.Api.Struct stru);
			/**
			 * Specifies the base struct.
			 */
			public Valadoc.Api.TypeReference? base_type { get; set; }
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * Represents a node in the symbol tree.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class Symbol : Valadoc.Api.Node {
			public Symbol (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string? name, Valadoc.Api.SymbolAccessibility accessibility, void* data);
			public void add_attribute (Valadoc.Api.Attribute att);
			public Valadoc.Api.Attribute? get_attribute (string name);
			public Gee.Collection<Valadoc.Api.Attribute> get_attributes ();
			/**
			 * {@inheritDoc}
			 */
			public override bool is_browsable (Valadoc.Settings settings);
			public Valadoc.Api.SymbolAccessibility accessibility { get; private set; }
			public bool is_deprecated { get; private set; }
			/**
			 * Specifies whether this symbol is internal.
			 */
			public bool is_internal { get; }
			/**
			 * Specifies whether this symbol is private.
			 */
			public bool is_private { get; }
			/**
			 * Specifies whether this symbol is protected.
			 */
			public bool is_protected { get; }
			/**
			 * Specifies whether this symbol is public.
			 */
			public bool is_public { get; }
		}
		/**
		 * The root of the code tree.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Tree {
			public Tree (Valadoc.ErrorReporter reporter, Valadoc.Settings settings, void* data = null);
			/**
			 * Visits this node with the specified Visitor.
			 *
			 * @param visitor the visitor to be called while traversing
			 */
			public void accept (Valadoc.Api.Visitor visitor);
			/**
			 * Visits all children of this node with the given types with the specified Visitor.
			 *
			 * @param visitor the visitor to be called while traversing
			 */
			public void accept_children (Valadoc.Api.Visitor visitor);
			public void add_external_c_files (string name);
			public void add_package (Valadoc.Api.Package package);
			public void check_comments (Valadoc.DocumentationParser docparser);
			public bool create_tree ();
			/**
			 * Returns a list of C source files.
			 *
			 * @return list of C source files
			 */
			public Gee.Collection<string> get_external_c_files ();
			/**
			 * Returns a list of all packages in the tree
			 *
			 * @return list of all packages
			 */
			public Gee.Collection<Valadoc.Api.Package> get_package_list ();
			/**
			 * Import documentation from various sources
			 *
			 * @param importers a list of importers
			 * @param packages sources
			 * @param import_directories List of directories where to find the files
			 */
			public void import_comments (Valadoc.Importer.DocumentationImporter[] importers, string[] packages, string[] import_directories);
			public void parse_comments (Valadoc.DocumentationParser docparser);
			public Valadoc.Api.Node? search_symbol_cstr (Valadoc.Api.Node? element, string cname);
			public Valadoc.Api.Node? search_symbol_path (Valadoc.Api.Node? element, string[] path);
			public Valadoc.Api.Node? search_symbol_str (Valadoc.Api.Node? element, string symname);
			public Valadoc.Api.TypeSymbol? search_symbol_type_cstr (string cname);
			public void* data { get; set; }
			public Valadoc.Highlighter.Highlighter highlighter { get; }
			/**
			 * The root of the wiki tree.
			 */
			public Valadoc.WikiPageTree? wikitree { get; private set; }
		}
		/**
		 * Represents a generic type parameter in the source code.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class TypeParameter : Valadoc.Api.Symbol {
			public TypeParameter (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, void* data);
			/**
			 * {@inheritDoc}
			 */
			public override void accept (Valadoc.Api.Visitor visitor);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			public override bool is_browsable (Valadoc.Settings settings);
			/**
			 * {@inheritDoc}
			 */
			public override Valadoc.Api.NodeType node_type { get; }
		}
		/**
		 * A reference to a data type.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class TypeReference : Valadoc.Api.Item {
			public TypeReference (Valadoc.Api.Item parent, Valadoc.Api.Ownership ownership, bool pass_ownership, bool is_dynamic, bool is_nullable, string? dbus_type_signature, void* data);
			public void add_type_argument (Valadoc.Api.TypeReference type_ref);
			/**
			 * {@inheritDoc}
			 */
			protected override Valadoc.Content.Inline build_signature ();
			public string? get_dbus_type_signature ();
			/**
			 * Returns a copy of the list of generic type arguments.
			 *
			 * @return type argument list
			 */
			public Gee.Collection<Valadoc.Api.TypeReference> get_type_arguments ();
			/**
			 * The referred data type.
			 */
			public Valadoc.Api.Item? data_type { get; set; }
			/**
			 * Specifies that the expression is dynamic.
			 */
			public bool is_dynamic { get; private set; }
			/**
			 * Specifies that the expression may be null.
			 */
			public bool is_nullable { get; private set; }
			/**
			 * Specifies that the expression is owned.
			 */
			public bool is_owned { get; }
			/**
			 * Specifies that the expression is unwoned.
			 */
			public bool is_unowned { get; }
			/**
			 * Specifies that the expression is weak.
			 */
			public bool is_weak { get; }
			public bool pass_ownership { get; private set; }
		}
		/**
		 * Represents a runtime data type.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class TypeSymbol : Valadoc.Api.Symbol {
			public TypeSymbol (Valadoc.Api.Node parent, Valadoc.Api.SourceFile file, string name, Valadoc.Api.SymbolAccessibility accessibility, Valadoc.Api.SourceComment? comment, string? type_macro_name, string? is_type_macro_name, string? type_cast_macro_name, string? type_function_name, bool is_basic_type, void* data);
			/**
			 * Gets the name of the GType macro which determines whether a type instance is of a given type.
			 */
			public string get_is_type_macro_name ();
			/**
			 * Gets the name of the GType macro which casts a type instance to the given type.
			 */
			public string get_type_cast_macro_name ();
			/**
			 * Gets the name of the get_type() function which represents the type symbol
			 */
			public string get_type_function_name ();
			/**
			 * Gets the name of the GType macro which represents the type symbol
			 */
			public string get_type_macro_name ();
			/**
			 * Specifies whether this symbol is a basic type (string, int, char, etc)
			 */
			public bool is_basic_type { get; private set; }
		}
		/**
		 * Abstract visitor for traversing API.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class Visitor : GLib.Object {
			public Visitor ();
			/**
			 * Visit operation called for classes.
			 *
			 * @param item a class
			 */
			public virtual void visit_class (Valadoc.Api.Class item);
			/**
			 * Visit operation called for constants.
			 *
			 * @param item a constant
			 */
			public virtual void visit_constant (Valadoc.Api.Constant item);
			/**
			 * Visit operation called for delegates.
			 *
			 * @param item a delegate
			 */
			public virtual void visit_delegate (Valadoc.Api.Delegate item);
			/**
			 * Visit operation called for enums.
			 *
			 * @param item a enum
			 */
			public virtual void visit_enum (Valadoc.Api.Enum item);
			/**
			 * Visit operation called for enum values.
			 *
			 * @param item a enum value
			 */
			public virtual void visit_enum_value (Valadoc.Api.EnumValue item);
			/**
			 * Visit operation called for error codes.
			 *
			 * @param item a error code
			 */
			public virtual void visit_error_code (Valadoc.Api.ErrorCode item);
			/**
			 * Visit operation called for error domains.
			 *
			 * @param item a error domain
			 */
			public virtual void visit_error_domain (Valadoc.Api.ErrorDomain item);
			/**
			 * Visit operation called for fields.
			 *
			 * @param item a field
			 */
			public virtual void visit_field (Valadoc.Api.Field item);
			/**
			 * Visit operation called for formal parameters.
			 *
			 * @param item a formal parameter
			 */
			public virtual void visit_formal_parameter (Valadoc.Api.FormalParameter item);
			/**
			 * Visit operation called for interfaces.
			 *
			 * @param item a interface
			 */
			public virtual void visit_interface (Valadoc.Api.Interface item);
			/**
			 * Visit operation called for methods.
			 *
			 * @param item a method
			 */
			public virtual void visit_method (Valadoc.Api.Method item);
			/**
			 * Visit operation called for namespaces
			 *
			 * @param item a namespace
			 */
			public virtual void visit_namespace (Valadoc.Api.Namespace item);
			/**
			 * Visit operation called for packages like gir-files and vapi-files.
			 *
			 * @param item a package
			 */
			public virtual void visit_package (Valadoc.Api.Package item);
			/**
			 * Visit operation called for properties.
			 *
			 * @param item a property
			 */
			public virtual void visit_property (Valadoc.Api.Property item);
			/**
			 * Visit operation called for signals.
			 *
			 * @param item a signal
			 */
			public virtual void visit_signal (Valadoc.Api.Signal item);
			/**
			 * Visit operation called for structs.
			 *
			 * @param item a struct
			 */
			public virtual void visit_struct (Valadoc.Api.Struct item);
			/**
			 * Visit operation called for api trees.
			 *
			 * @param item a tree
			 */
			public virtual void visit_tree (Valadoc.Api.Tree item);
			/**
			 * Visit operation called for type parameters.
			 *
			 * @param item a type parameter
			 */
			public virtual void visit_type_parameter (Valadoc.Api.TypeParameter item);
		}
		/**
		 * Specifies whether users are able to browse the item.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface Browsable : Valadoc.Api.Item {
			/**
			 * Specifies whether users are able to browse the item.
			 */
			public abstract bool is_browsable (Valadoc.Settings settings);
		}
		/**
		 * Used to translate imported C-documentation
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface Callable : Valadoc.Api.Symbol {
			/**
			 * The return type of this symbol.
			 *
			 * @return The return type of this symbol or null for void
			 */
			public abstract Valadoc.Api.TypeReference? return_type { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum FormalParameterType {
			IN,
			OUT,
			REF;
			public string to_string ();
		}
		/**
		 * Specifies the context of a node.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum NodeType {
			CLASS,
			CONSTANT,
			CREATION_METHOD,
			DELEGATE,
			ENUM,
			ENUM_VALUE,
			ERROR_CODE,
			ERROR_DOMAIN,
			FIELD,
			FORMAL_PARAMETER,
			INTERFACE,
			METHOD,
			NAMESPACE,
			PACKAGE,
			PROPERTY,
			PROPERTY_ACCESSOR,
			SIGNAL,
			STATIC_METHOD,
			STRUCT,
			TYPE_PARAMETER;
			public string to_string ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum Ownership {
			DEFAULT,
			UNOWNED,
			OWNED,
			WEAK;
			public string to_string ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum PropertyAccessorType {
			CONSTRUCT,
			SET,
			GET;
			public string to_string ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum PropertyBindingType {
			UNMODIFIED,
			OVERRIDE,
			ABSTRACT,
			VIRTUAL;
			public string to_string ();
		}
		/**
		 * The access modifier
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum SymbolAccessibility {
			PROTECTED,
			INTERNAL,
			PRIVATE,
			PUBLIC;
			public string to_string ();
		}
	}
	namespace Charts {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Chart : Valadoc.Api.Visitor {
			protected Gvc.Context context;
			protected Valadoc.Charts.Factory factory;
			protected Gvc.Graph graph;
			public Chart (Valadoc.Charts.Factory factory, Valadoc.Api.Node node);
			public void save (string file_name, string file_type = "png");
			public void write (GLib.FileStream file, string file_type);
			public uint8[]? write_buffer (string file_type);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class Factory : GLib.Object {
			public Factory ();
			public abstract Gvc.Edge add_children (Gvc.Graph graph, Gvc.Node parent, Gvc.Node child);
			public abstract Gvc.Node create_class (Gvc.Graph graph, Valadoc.Api.Class item);
			public abstract Gvc.Context create_context (Gvc.Graph graph);
			public abstract Gvc.Node create_delegate (Gvc.Graph graph, Valadoc.Api.Delegate item);
			public abstract Gvc.Node create_enum (Gvc.Graph graph, Valadoc.Api.Enum item);
			public abstract Gvc.Node create_errordomain (Gvc.Graph graph, Valadoc.Api.ErrorDomain item);
			public abstract Gvc.Graph create_graph (Valadoc.Api.Node item);
			public abstract Gvc.Node create_interface (Gvc.Graph graph, Valadoc.Api.Interface item);
			public abstract Gvc.Node create_namespace (Gvc.Graph graph, Valadoc.Api.Namespace item);
			public abstract Gvc.Node create_struct (Gvc.Graph graph, Valadoc.Api.Struct item);
			protected Gvc.Node create_type (Gvc.Graph graph, Valadoc.Api.Node item);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Hierarchy : Valadoc.Charts.Chart {
			public Hierarchy (Valadoc.Charts.Factory factory, Valadoc.Api.Node node);
			public override void visit_class (Valadoc.Api.Class item);
			public override void visit_interface (Valadoc.Api.Interface item);
			public override void visit_struct (Valadoc.Api.Struct item);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class SimpleFactory : Valadoc.Charts.Factory {
			public SimpleFactory ();
			public override Gvc.Edge add_children (Gvc.Graph graph, Gvc.Node parent, Gvc.Node child);
			protected virtual Gvc.Node configure_type (Gvc.Node node, Valadoc.Api.Node item);
			public override Gvc.Node create_class (Gvc.Graph graph, Valadoc.Api.Class item);
			public override Gvc.Context create_context (Gvc.Graph graph);
			public override Gvc.Node create_delegate (Gvc.Graph graph, Valadoc.Api.Delegate item);
			public override Gvc.Node create_enum (Gvc.Graph graph, Valadoc.Api.Enum item);
			public override Gvc.Node create_errordomain (Gvc.Graph graph, Valadoc.Api.ErrorDomain item);
			public override Gvc.Graph create_graph (Valadoc.Api.Node item);
			public override Gvc.Node create_interface (Gvc.Graph graph, Valadoc.Api.Interface item);
			public override Gvc.Node create_namespace (Gvc.Graph graph, Valadoc.Api.Namespace item);
			public override Gvc.Node create_struct (Gvc.Graph graph, Valadoc.Api.Struct item);
		}
	}
	namespace Content {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class BlockContent : Valadoc.Content.ContentElement {
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public override bool is_empty ();
			public Gee.List<Valadoc.Content.Block> content { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Comment : Valadoc.Content.BlockContent {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public Gee.List<Valadoc.Content.Taglet> find_taglets (Valadoc.Api.Node? container, GLib.Type taglet_type);
			public Gee.List<Valadoc.Content.Taglet> taglets { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class ContentElement : GLib.Object {
			public ContentElement ();
			public abstract void accept (Valadoc.Content.ContentVisitor visitor);
			public virtual void accept_children (Valadoc.Content.ContentVisitor visitor);
			public abstract void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public virtual void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public abstract Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public abstract bool is_empty ();
			public Valadoc.Content.ContentElement parent { get; internal set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class ContentFactory : GLib.Object {
			public ContentFactory (Valadoc.Settings settings, Valadoc.ResourceLocator locator, Valadoc.ModuleLoader modules);
			public Valadoc.Content.Comment create_comment ();
			public Valadoc.Content.Embedded create_embedded ();
			public Valadoc.Content.Headline create_headline ();
			public Valadoc.Content.Link create_link ();
			public Valadoc.Content.List create_list ();
			public Valadoc.Content.ListItem create_list_item ();
			public Valadoc.Content.Note create_note ();
			public Valadoc.Content.Page create_page ();
			public Valadoc.Content.Paragraph create_paragraph ();
			public Valadoc.Content.Run create_run (Valadoc.Content.Run.Style style);
			public Valadoc.Content.SourceCode create_source_code ();
			public Valadoc.Content.Table create_table ();
			public Valadoc.Content.TableCell create_table_cell ();
			public Valadoc.Content.TableRow create_table_row ();
			public Valadoc.Content.Taglet? create_taglet (string name);
			public Valadoc.Content.Text create_text (string? text = null);
			public Valadoc.Content.Warning create_warning ();
			public Valadoc.Content.WikiLink create_wiki_link ();
			public Valadoc.Content.ContentElement set_style_attributes (Valadoc.Content.StyleAttributes element, Valadoc.Content.VerticalAlign? valign, Valadoc.Content.HorizontalAlign? halign, string? style);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class ContentRenderer : Valadoc.Content.ContentVisitor {
			public ContentRenderer ();
			public abstract void render (Valadoc.Content.ContentElement element);
			public abstract void render_children (Valadoc.Content.ContentElement element);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class ContentVisitor : GLib.Object {
			public ContentVisitor ();
			public virtual void visit_comment (Valadoc.Content.Comment element);
			public virtual void visit_embedded (Valadoc.Content.Embedded element);
			public virtual void visit_headline (Valadoc.Content.Headline element);
			public virtual void visit_link (Valadoc.Content.Link element);
			public virtual void visit_list (Valadoc.Content.List element);
			public virtual void visit_list_item (Valadoc.Content.ListItem element);
			public virtual void visit_note (Valadoc.Content.Note element);
			public virtual void visit_page (Valadoc.Content.Page element);
			public virtual void visit_paragraph (Valadoc.Content.Paragraph element);
			public virtual void visit_run (Valadoc.Content.Run element);
			public virtual void visit_source_code (Valadoc.Content.SourceCode element);
			public virtual void visit_symbol_link (Valadoc.Content.SymbolLink element);
			public virtual void visit_table (Valadoc.Content.Table element);
			public virtual void visit_table_cell (Valadoc.Content.TableCell element);
			public virtual void visit_table_row (Valadoc.Content.TableRow element);
			public virtual void visit_taglet (Valadoc.Content.Taglet element);
			public virtual void visit_text (Valadoc.Content.Text element);
			public virtual void visit_warning (Valadoc.Content.Warning element);
			public virtual void visit_wiki_link (Valadoc.Content.WikiLink element);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Embedded : Valadoc.Content.ContentElement, Valadoc.Content.Inline, Valadoc.Content.StyleAttributes {
			public Valadoc.Api.Package package;
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public string? caption { get; set; }
			public string url { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Headline : Valadoc.Content.InlineContent, Valadoc.Content.Block {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public int level { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class InlineContent : Valadoc.Content.ContentElement {
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override bool is_empty ();
			public Gee.List<Valadoc.Content.Inline> content { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class InlineTaglet : Valadoc.Content.ContentElement, Valadoc.Content.Taglet, Valadoc.Content.Inline {
			protected Valadoc.ResourceLocator locator;
			protected Valadoc.Settings settings;
			public InlineTaglet ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public abstract Valadoc.Rule? get_parser_rule (Valadoc.Rule run_rule);
			public override bool is_empty ();
			public abstract Valadoc.Content.ContentElement produce_content ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Link : Valadoc.Content.InlineContent, Valadoc.Content.Inline {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			/**
			 * Used by importers to transform internal URLs
			 */
			public Valadoc.Importer.InternalIdRegistrar id_registrar { get; internal set; }
			public string url { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class List : Valadoc.Content.ContentElement, Valadoc.Content.Block {
			public enum Bullet {
				NONE,
				UNORDERED,
				ORDERED,
				ORDERED_NUMBER,
				ORDERED_LOWER_CASE_ALPHA,
				ORDERED_UPPER_CASE_ALPHA,
				ORDERED_LOWER_CASE_ROMAN,
				ORDERED_UPPER_CASE_ROMAN;
				public static Valadoc.Content.List.Bullet? from_string (string? str);
				public unowned string to_string ();
			}
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public Valadoc.Content.List.Bullet bullet { get; set; }
			public Gee.List<Valadoc.Content.ListItem> items { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class ListItem : Valadoc.Content.BlockContent {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Note : Valadoc.Content.BlockContent, Valadoc.Content.Block {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Page : Valadoc.Content.BlockContent {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Paragraph : Valadoc.Content.InlineContent, Valadoc.Content.Block, Valadoc.Content.StyleAttributes {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Run : Valadoc.Content.InlineContent, Valadoc.Content.Inline {
			public enum Style {
				NONE,
				BOLD,
				ITALIC,
				UNDERLINED,
				MONOSPACED,
				STROKE,
				LANG_KEYWORD,
				LANG_LITERAL,
				LANG_BASIC_TYPE,
				LANG_TYPE,
				LANG_PREPROCESSOR,
				LANG_COMMENT,
				LANG_ESCAPE,
				XML_ESCAPE,
				XML_ELEMENT,
				XML_ATTRIBUTE,
				XML_ATTRIBUTE_VALUE,
				XML_COMMENT,
				XML_CDATA;
				public static Valadoc.Content.Run.Style? from_string (string str);
				public unowned string to_string ();
			}
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public Valadoc.Content.Run.Style style { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class SourceCode : Valadoc.Content.ContentElement, Valadoc.Content.Inline {
			public enum Language {
				GENIE,
				VALA,
				XML,
				C;
				public static Valadoc.Content.SourceCode.Language? from_path (string path);
				public static Valadoc.Content.SourceCode.Language? from_string (string str, bool is_extension = false);
				public unowned string to_string ();
			}
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public string code { get; set; }
			public Valadoc.Content.Run? highlighted_code { get; private set; }
			public Valadoc.Content.SourceCode.Language? language { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class SymbolLink : Valadoc.Content.InlineContent, Valadoc.Content.Inline {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override void configure (Valadoc.Settings settings, Valadoc.ResourceLocator locator);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public string given_symbol_name { get; set; }
			public Valadoc.Api.Node symbol { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Table : Valadoc.Content.ContentElement, Valadoc.Content.Block {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public Gee.List<Valadoc.Content.TableRow> rows { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class TableCell : Valadoc.Content.InlineContent, Valadoc.Content.StyleAttributes {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public int colspan { get; set; }
			public int rowspan { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class TableRow : Valadoc.Content.ContentElement {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void accept_children (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public Gee.List<Valadoc.Content.TableCell> cells { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Text : Valadoc.Content.ContentElement, Valadoc.Content.Inline {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public string content { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Warning : Valadoc.Content.BlockContent, Valadoc.Content.Block {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class WikiLink : Valadoc.Content.InlineContent, Valadoc.Content.Inline {
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public string name { get; set; }
			public Valadoc.WikiPage page { get; internal set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface Block : Valadoc.Content.ContentElement {
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface Inline : Valadoc.Content.ContentElement {
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface StyleAttributes : Valadoc.Content.ContentElement {
			public abstract Valadoc.Content.HorizontalAlign? horizontal_align { get; set; }
			public abstract string? style { get; set; }
			public abstract Valadoc.Content.VerticalAlign? vertical_align { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface Taglet : Valadoc.Content.ContentElement {
			public virtual Gee.List<Valadoc.Content.ContentElement>? get_inheritable_documentation ();
			public abstract Valadoc.Rule? get_parser_rule (Valadoc.Rule run_rule);
			public virtual bool inheritable (Valadoc.Content.Taglet taglet);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum HorizontalAlign {
			LEFT,
			RIGHT,
			CENTER;
			public static Valadoc.Content.HorizontalAlign? from_string (string str);
			public unowned string to_string ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum VerticalAlign {
			TOP,
			MIDDLE,
			BOTTOM;
			public static Valadoc.Content.VerticalAlign? from_string (string str);
			public unowned string to_string ();
		}
	}
	namespace Devhelp {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class MarkupWriter : Valadoc.MarkupWriter {
			public MarkupWriter (GLib.FileStream stream, bool xml_declaration = true);
			protected override bool content_inline_element (string name);
			public Valadoc.Devhelp.MarkupWriter end_book ();
			public Valadoc.Devhelp.MarkupWriter end_chapters ();
			public Valadoc.Devhelp.MarkupWriter end_functions ();
			public Valadoc.Devhelp.MarkupWriter end_sub ();
			protected override bool inline_element (string name);
			public Valadoc.Devhelp.MarkupWriter keyword (string name, string type, string link);
			public Valadoc.Devhelp.MarkupWriter start_book (string title, string lang, string link, string name, string version, string author);
			public Valadoc.Devhelp.MarkupWriter start_chapters ();
			public Valadoc.Devhelp.MarkupWriter start_functions ();
			public Valadoc.Devhelp.MarkupWriter start_sub (string name, string link);
		}
	}
	namespace Gtkdoc {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class MarkdownParser : GLib.Object, Valadoc.ResourceLocator {
			public MarkdownParser (Valadoc.Settings settings, Valadoc.ErrorReporter reporter, Valadoc.Api.Tree? tree, Valadoc.ModuleLoader _modules);
			public void init_rules ();
			public Valadoc.Content.Comment? parse (Valadoc.Api.Node element, Valadoc.Api.GirSourceComment gir_comment, Valadoc.GirMetaData metadata, Valadoc.Importer.InternalIdRegistrar id_registrar, string? this_name = null);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class MarkdownScanner : GLib.Object, Valadoc.Scanner {
			public MarkdownScanner (Valadoc.Settings settings);
			public int get_line_start_column ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Parser : GLib.Object, Valadoc.ResourceLocator {
			public Parser (Valadoc.Settings settings, Valadoc.ErrorReporter reporter, Valadoc.Api.Tree tree, Valadoc.ModuleLoader modules);
			public Valadoc.Content.Comment? parse (Valadoc.Api.Node element, Valadoc.Api.GirSourceComment gir_comment, Valadoc.GirMetaData gir_metadata, Valadoc.Importer.InternalIdRegistrar id_registrar);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Scanner {
			public Scanner ();
			public Valadoc.Gtkdoc.Token next ();
			public void reset (string content);
			public static string unescape (string txt);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Token {
			public Gee.HashMap<string,string>? attributes;
			public string content;
			public int first_column;
			public int last_column;
			public int length;
			public int line;
			public weak string start;
			public Valadoc.Gtkdoc.TokenType type;
			public Token (Valadoc.Gtkdoc.TokenType type, string content, Gee.HashMap<string,string>? attributes, string start, int length, int line, int first_column, int last_column);
			public string to_string ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum TokenType {
			XML_OPEN,
			XML_CLOSE,
			XML_COMMENT,
			GTKDOC_FUNCTION,
			GTKDOC_CONST,
			GTKDOC_TYPE,
			GTKDOC_PARAM,
			GTKDOC_SOURCE_OPEN,
			GTKDOC_SOURCE_CLOSE,
			GTKDOC_SIGNAL,
			GTKDOC_PROPERTY,
			GTKDOC_PARAGRAPH,
			NEWLINE,
			SPACE,
			WORD,
			EOF
		}
	}
	namespace Highlighter {
		/**
		 * A cheap scanner used to highlight C and Vala source code.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class CodeScanner : GLib.Object, Valadoc.Highlighter.Scanner {
			public CodeScanner (string content, bool enable_string_templates, bool enabel_verbatim_string, bool enable_preprocessor_define, bool enable_preprocessor_include, bool enable_keyword_escape, Gee.HashMap<string,Valadoc.Highlighter.CodeTokenType?> keywords);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class CodeToken {
			public CodeToken (Valadoc.Highlighter.CodeTokenType type, string content);
			public string content { get; private set; }
			public Valadoc.Highlighter.CodeTokenType token_type { get; private set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Highlighter : GLib.Object {
			public Highlighter ();
			/**
			 * Used to highlight C source code.
			 */
			public Valadoc.Content.Run highlight_c (string source_code);
			/**
			 * Used to highlight vala source code.
			 */
			public Valadoc.Content.Run highlight_vala (string source_code);
			/**
			 * Used to highlight C source code.
			 */
			public Valadoc.Content.Run highlight_xml (string source_code);
		}
		/**
		 * A cheap scanner used to highlight XML.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class XmlScanner : GLib.Object, Valadoc.Highlighter.Scanner {
			public XmlScanner (string content);
		}
		/**
		 * Scanner interface used to highlight source code.
		 */
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public interface Scanner : GLib.Object {
			public abstract Valadoc.Highlighter.CodeToken next ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public enum CodeTokenType {
			XML_ESCAPE,
			XML_ELEMENT,
			XML_ATTRIBUTE,
			XML_ATTRIBUTE_VALUE,
			XML_COMMENT,
			XML_CDATA,
			PREPROCESSOR,
			COMMENT,
			KEYWORD,
			LITERAL,
			ESCAPE,
			PLAIN,
			TYPE,
			EOF;
			public unowned string to_string ();
		}
	}
	namespace Html {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class BasicDoclet : Valadoc.Api.Visitor, Valadoc.Doclet {
			protected Valadoc.Html.HtmlRenderer _renderer;
			protected Valadoc.Html.CssClassResolver cssresolver;
			protected Valadoc.Charts.Factory image_factory;
			protected string package_list_link;
			protected Valadoc.ErrorReporter reporter;
			protected Valadoc.Api.Tree tree;
			protected Valadoc.Html.MarkupWriter writer;
			public BasicDoclet ();
			protected void fetch_subnamespace_names (Valadoc.Api.Node node, Gee.ArrayList<Valadoc.Api.Namespace> namespaces);
			protected virtual string get_icon_directory ();
			protected virtual string get_img_path (Valadoc.Api.Node element, string type);
			protected virtual string get_img_path_html (Valadoc.Api.Node element, string type);
			protected string? get_link (Valadoc.Api.Node to, Valadoc.Api.Node from);
			protected bool is_internal_node (Valadoc.Api.Node node);
			public virtual void process (Valadoc.Settings settings, Valadoc.Api.Tree tree, Valadoc.ErrorReporter reporter);
			protected void write_child_dependencies (Valadoc.Api.Package package, Valadoc.Api.Node? parent);
			protected void write_child_namespaces (Valadoc.Api.Node node, Valadoc.Api.Node? parent);
			protected void write_children (Valadoc.Api.Node node, Valadoc.Api.NodeType type, string type_string, Valadoc.Api.Node? container);
			protected void write_file_footer ();
			protected void write_file_header (string css, string js, string? title);
			protected void write_image_block (Valadoc.Api.Node element);
			public void write_namespace_content (Valadoc.Api.Namespace node, Valadoc.Api.Node? parent);
			protected void write_namespace_note (Valadoc.Api.Node element);
			protected void write_navi_children (Valadoc.Api.Node node, Valadoc.Api.NodeType type, Valadoc.Api.Node? parent);
			protected void write_navi_entry (Valadoc.Api.Node element, Valadoc.Api.Node? pos, string style, bool link, bool full_name = false);
			protected void write_navi_entry_html_template (string style, string content, bool is_deprecated);
			protected void write_navi_entry_html_template_with_link (string style, string link, string content, bool is_deprecated);
			protected void write_navi_leaf_symbol (Valadoc.Api.Node node);
			protected void write_navi_package (Valadoc.Api.Package package);
			public void write_navi_packages (Valadoc.Api.Tree tree);
			public void write_navi_packages_inline (Valadoc.Api.Tree tree);
			protected void write_navi_symbol (Valadoc.Api.Node node);
			protected void write_navi_symbol_inline (Valadoc.Api.Node node, Valadoc.Api.Node? parent);
			protected void write_navi_top_entry (Valadoc.Api.Node element, Valadoc.Api.Node? parent);
			protected void write_package_content (Valadoc.Api.Package node, Valadoc.Api.Node? parent);
			public void write_package_index_content (Valadoc.Api.Tree tree);
			protected void write_package_note (Valadoc.Api.Node element);
			public void write_symbol_content (Valadoc.Api.Node node);
			protected void write_top_element_template (string link);
			protected void write_top_elements (Valadoc.Api.Node element, Valadoc.Api.Node? parent);
			protected virtual void write_wiki_page (Valadoc.WikiPage page, string contentp, string css_path, string js_path, string pkg_name);
			protected void write_wiki_pages (Valadoc.Api.Tree tree, string css_path_wiki, string js_path_wiki, string contentp);
			public Valadoc.Html.LinkHelper linker { get; protected set; }
			public Valadoc.Settings settings { get; protected set; }
			public string wiki_index_name { get; protected set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class CssClassResolver : Valadoc.Api.Visitor {
			public CssClassResolver ();
			public string resolve (Valadoc.Api.Node node);
			public override void visit_class (Valadoc.Api.Class item);
			public override void visit_constant (Valadoc.Api.Constant item);
			public override void visit_delegate (Valadoc.Api.Delegate item);
			public override void visit_enum (Valadoc.Api.Enum item);
			public override void visit_enum_value (Valadoc.Api.EnumValue item);
			public override void visit_error_code (Valadoc.Api.ErrorCode item);
			public override void visit_error_domain (Valadoc.Api.ErrorDomain item);
			public override void visit_field (Valadoc.Api.Field item);
			public override void visit_interface (Valadoc.Api.Interface item);
			public override void visit_method (Valadoc.Api.Method item);
			public override void visit_namespace (Valadoc.Api.Namespace item);
			public override void visit_package (Valadoc.Api.Package item);
			public override void visit_property (Valadoc.Api.Property item);
			public override void visit_signal (Valadoc.Api.Signal item);
			public override void visit_struct (Valadoc.Api.Struct item);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class HtmlRenderer : Valadoc.Content.ContentRenderer {
			protected Valadoc.Documentation? _container;
			protected Valadoc.Documentation? _owner;
			protected Valadoc.Html.CssClassResolver cssresolver;
			protected Valadoc.Html.LinkHelper linker;
			protected Valadoc.Settings settings;
			protected weak Valadoc.Html.MarkupWriter writer;
			public HtmlRenderer (Valadoc.Settings settings, Valadoc.Html.LinkHelper linker, Valadoc.Html.CssClassResolver cssresolver);
			public override void render (Valadoc.Content.ContentElement element);
			public override void render_children (Valadoc.Content.ContentElement element);
			public void set_container (Valadoc.Documentation? container);
			public void set_owner (Valadoc.Documentation? owner);
			public void set_writer (Valadoc.Html.MarkupWriter writer);
			public override void visit_comment (Valadoc.Content.Comment element);
			public override void visit_embedded (Valadoc.Content.Embedded element);
			public override void visit_headline (Valadoc.Content.Headline element);
			public override void visit_link (Valadoc.Content.Link element);
			public override void visit_list (Valadoc.Content.List element);
			public override void visit_list_item (Valadoc.Content.ListItem element);
			public override void visit_note (Valadoc.Content.Note element);
			public override void visit_page (Valadoc.Content.Page element);
			public override void visit_paragraph (Valadoc.Content.Paragraph element);
			public override void visit_run (Valadoc.Content.Run element);
			public override void visit_source_code (Valadoc.Content.SourceCode element);
			public override void visit_symbol_link (Valadoc.Content.SymbolLink element);
			public override void visit_table (Valadoc.Content.Table element);
			public override void visit_table_cell (Valadoc.Content.TableCell element);
			public override void visit_table_row (Valadoc.Content.TableRow element);
			public override void visit_taglet (Valadoc.Content.Taglet element);
			public override void visit_text (Valadoc.Content.Text element);
			public override void visit_warning (Valadoc.Content.Warning element);
			public override void visit_wiki_link (Valadoc.Content.WikiLink element);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class LinkHelper : GLib.Object {
			protected Valadoc.Settings _settings;
			public LinkHelper ();
			protected virtual string? from_node_to_node (Valadoc.Api.Node from, Valadoc.Api.Node to);
			protected virtual string? from_node_to_package (Valadoc.Api.Node from, Valadoc.Api.Package to);
			protected virtual string? from_node_to_wiki (Valadoc.Api.Node from, Valadoc.WikiPage to);
			protected virtual string? from_package_to_node (Valadoc.Api.Package from, Valadoc.Api.Node to);
			protected virtual string? from_package_to_package (Valadoc.Api.Package from, Valadoc.Api.Package to);
			protected virtual string? from_package_to_wiki (Valadoc.Api.Package from, Valadoc.WikiPage to);
			protected virtual string? from_wiki_to_node (Valadoc.WikiPage from, Valadoc.Api.Node to);
			protected virtual string? from_wiki_to_package (Valadoc.WikiPage from, Valadoc.Api.Package to);
			protected virtual string? from_wiki_to_wiki (Valadoc.WikiPage from, Valadoc.WikiPage to);
			public virtual string? get_package_link (Valadoc.Api.Package package, Valadoc.Settings settings);
			public string? get_relative_link (Valadoc.Documentation from, Valadoc.Documentation to, Valadoc.Settings settings);
			protected string translate_wiki_name (Valadoc.WikiPage page);
			public bool enable_browsable_check { get; set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class MarkupWriter : Valadoc.MarkupWriter {
			public MarkupWriter (GLib.FileStream stream, bool xml_declaration = true);
			public Valadoc.Html.MarkupWriter add_usemap (Valadoc.Charts.Chart chart);
			public MarkupWriter.builder (GLib.StringBuilder builder, bool xml_declaration = true);
			protected override bool content_inline_element (string name);
			public Valadoc.Html.MarkupWriter image (string src, string? caption = null, string? css_class = null);
			protected override bool inline_element (string name);
			public Valadoc.Html.MarkupWriter javascript_link (string url);
			public Valadoc.Html.MarkupWriter link (string url, string label, string? css_class = null);
			public Valadoc.Html.MarkupWriter stylesheet_link (string url);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class SimpleChartFactory : Valadoc.Charts.SimpleFactory {
			public SimpleChartFactory (Valadoc.Settings settings, Valadoc.Html.LinkHelper linker);
			protected override Gvc.Node configure_type (Gvc.Node node, Valadoc.Api.Node item);
			public override Gvc.Graph create_graph (Valadoc.Api.Node item);
		}
	}
	namespace Importer {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public abstract class DocumentationImporter : GLib.Object, Valadoc.ResourceLocator {
			protected Valadoc.ModuleLoader modules;
			protected Valadoc.Settings settings;
			protected Valadoc.Api.Tree tree;
			public DocumentationImporter (Valadoc.Api.Tree tree, Valadoc.ModuleLoader modules, Valadoc.Settings settings);
			public abstract void process (string filename);
			public virtual string resolve (string path);
			public abstract string file_extension { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class GirDocumentationImporter : Valadoc.Importer.DocumentationImporter {
			public GirDocumentationImporter (Valadoc.Api.Tree tree, Valadoc.DocumentationParser parser, Valadoc.ModuleLoader modules, Valadoc.Settings settings, Valadoc.ErrorReporter reporter);
			public override void process (string source_file);
			public override string file_extension { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class InternalIdRegistrar {
			public InternalIdRegistrar ();
			public Valadoc.Api.Node? map_symbol_id (string id);
			public string? map_url_id (string id);
			public void read_index_sgml_file (string filename, string? index_sgml_online, Valadoc.ErrorReporter reporter);
			public void register_symbol (string id, Valadoc.Api.Node symbol);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class ValadocDocumentationImporter : Valadoc.Importer.DocumentationImporter, Valadoc.ResourceLocator {
			protected Valadoc.Content.ContentFactory factory;
			public ValadocDocumentationImporter (Valadoc.Api.Tree tree, Valadoc.DocumentationParser parser, Valadoc.ModuleLoader modules, Valadoc.Settings settings, Valadoc.ErrorReporter reporter);
			public override void process (string filename);
			public override string file_extension { get; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class ValadocDocumentationScanner : GLib.Object, Valadoc.Scanner {
			public ValadocDocumentationScanner (Valadoc.Settings settings);
			protected void accept (unichar c) throws Valadoc.ParserError;
			public int get_line ();
			public virtual string get_line_content ();
			public virtual int get_line_start_column ();
			protected unichar get_next_char (int offset = 1);
			public virtual void reset ();
			public virtual void stop ();
		}
	}
	namespace ImporterHelper {
	}
	namespace Taglets {
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Deprecated : Valadoc.Content.BlockContent, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public Deprecated ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class InheritDoc : Valadoc.Content.InlineTaglet {
			public InheritDoc ();
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override Valadoc.Rule? get_parser_rule (Valadoc.Rule run_rule);
			public override bool is_empty ();
			public override Valadoc.Content.ContentElement produce_content ();
			public Valadoc.Api.Node? inherited { get; private set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Link : Valadoc.Content.InlineTaglet {
			public Link ();
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override Valadoc.Rule? get_parser_rule (Valadoc.Rule run_rule);
			public override bool is_empty ();
			public override Valadoc.Content.ContentElement produce_content ();
			/**
			 * Accept leading 's', e.g. #Widgets
			 */
			public bool c_accept_plural { get; internal set; }
			/**
			 * True if symbol_name could only be resolved after removing 's'
			 *
			 * E.g. true or #Widgets, false for #Widget
			 */
			public bool c_is_plural { get; private set; }
			public string symbol_name { get; internal set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Param : Valadoc.Content.BlockContent, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public Param ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public bool is_c_self_param { get; internal set; }
			public bool is_this { get; private set; }
			public Valadoc.Api.Symbol? parameter { get; private set; }
			public string parameter_name { get; internal set; }
			public int position { get; private set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Return : Valadoc.Content.BlockContent, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public Return ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class See : Valadoc.Content.ContentElement, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public See ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public Valadoc.Api.Node symbol { get; private set; }
			public string symbol_name { get; private set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Since : Valadoc.Content.ContentElement, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public Since ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			public override bool is_empty ();
			public string version { get; internal set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public class Throws : Valadoc.Content.BlockContent, Valadoc.Content.Taglet, Valadoc.Content.Block {
			public Throws ();
			public override void accept (Valadoc.Content.ContentVisitor visitor);
			public override void check (Valadoc.Api.Tree api_root, Valadoc.Api.Node container, string file_path, Valadoc.ErrorReporter reporter, Valadoc.Settings settings);
			public override Valadoc.Content.ContentElement copy (Valadoc.Content.ContentElement? new_parent = null);
			/**
			 * Thrown  Error domain or Error code
			 */
			public Valadoc.Api.Node error_domain { get; private set; }
			public string error_domain_name { get; private set; }
		}
		[CCode (cheader_filename = "valadoc-1.0.h")]
		public static void init (Valadoc.ModuleLoader loader);
	}
	/**
	 * Resolves symbols by C-names
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class CTypeResolver : Valadoc.Api.Visitor {
		public CTypeResolver (Valadoc.Api.Tree tree);
		/**
		 * Resolves symbols by C-names
		 *
		 * @param _name a C-name
		 * @return the resolved node or null
		 */
		public Valadoc.Api.Node? resolve_symbol (Valadoc.Api.Node? element, string _name);
		public Valadoc.Api.TypeSymbol? resolve_symbol_type (string name);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_class (Valadoc.Api.Class item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_constant (Valadoc.Api.Constant item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_delegate (Valadoc.Api.Delegate item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_enum (Valadoc.Api.Enum item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_enum_value (Valadoc.Api.EnumValue item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_error_code (Valadoc.Api.ErrorCode item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_error_domain (Valadoc.Api.ErrorDomain item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_field (Valadoc.Api.Field item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_interface (Valadoc.Api.Interface item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_method (Valadoc.Api.Method item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_namespace (Valadoc.Api.Namespace item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_package (Valadoc.Api.Package item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_property (Valadoc.Api.Property item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_signal (Valadoc.Api.Signal item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_struct (Valadoc.Api.Struct item);
		/**
		 * {@inheritDoc}
		 */
		public override void visit_tree (Valadoc.Api.Tree item);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class CommentScanner : Valadoc.WikiScanner {
		public CommentScanner (Valadoc.Settings settings);
		protected override void accept (unichar c) throws Valadoc.ParserError;
		public override int get_line_start_column ();
		public override void reset ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class DocumentationParser : GLib.Object, Valadoc.ResourceLocator {
		public DocumentationParser (Valadoc.Settings settings, Valadoc.ErrorReporter reporter, Valadoc.Api.Tree tree, Valadoc.ModuleLoader modules);
		public void check (Valadoc.Api.Node element, Valadoc.Content.Comment comment);
		public void check_wikipage (Valadoc.Api.Package package, Valadoc.WikiPage page);
		public Valadoc.Content.Comment? parse (Valadoc.Api.Node element, Valadoc.Api.SourceComment comment);
		public Valadoc.Content.Comment? parse_comment_str (Valadoc.Api.Node element, string content, string filename, int first_line, int first_column);
		public Valadoc.Content.Page? parse_wikipage (Valadoc.Api.Package pkg, Valadoc.WikiPage page);
		public void transform_inheritdoc (Valadoc.Api.Node taglet_owner, Valadoc.Taglets.InheritDoc taglet);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ErrorReporter : GLib.Object {
		public ErrorReporter (Valadoc.Settings? settings = null);
		public void error (string file, long line, long startpos, long endpos, string errline, string msg_format, ...);
		/**
		 * Set all colors by string
		 *
		 * {{{
		 *   "error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01"
		 * }}}
		 */
		public bool set_colors (string str);
		public void simple_error (string? location, string msg_format, ...);
		public void simple_note (string? location, string msg_format, ...);
		public void simple_warning (string? location, string msg_format, ...);
		public void warning (string file, long line, long startpos, long endpos, string errline, string msg_format, ...);
		public int errors { get; }
		public int errors_offset { get; set; }
		public Valadoc.Settings? settings { get; set; }
		public GLib.FileStream stream { get; set; }
		public int warnings { get; }
		public int warnings_offset { get; set; }
	}
	/**
	 * Metadata reader for GIR files
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class GirMetaData : GLib.Object {
		public GirMetaData (string gir_file_path, string[] metadata_dirs, Valadoc.ErrorReporter reporter);
		/**
		 * Used to manipulate paths to resources inside gir-files
		 */
		public string get_resource_path (string resource);
		public string index_sgml { get; private set; }
		public string index_sgml_online { get; private set; }
		public bool is_docbook { get; private set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class GtkDocMarkupWriter : Valadoc.MarkupWriter {
		public GtkDocMarkupWriter ();
		protected override bool content_inline_element (string name);
		protected override bool inline_element (string name);
		public void reset ();
		public string content { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class GtkdocRenderer : Valadoc.Content.ContentRenderer {
		protected Valadoc.Settings settings;
		public GtkdocRenderer ();
		public void append_exceptions (Gee.List<Valadoc.Content.Taglet> taglets);
		public void append_see (Gee.List<Valadoc.Content.Taglet> taglets);
		public void append_since (Gee.List<Valadoc.Content.Taglet> taglets);
		public override void render (Valadoc.Content.ContentElement element);
		public override void render_children (Valadoc.Content.ContentElement element);
		public void render_symbol (Valadoc.Content.Comment? documentation);
		public override void visit_comment (Valadoc.Content.Comment element);
		public override void visit_embedded (Valadoc.Content.Embedded element);
		public override void visit_headline (Valadoc.Content.Headline element);
		public override void visit_link (Valadoc.Content.Link element);
		public override void visit_list (Valadoc.Content.List element);
		public override void visit_list_item (Valadoc.Content.ListItem element);
		public override void visit_note (Valadoc.Content.Note element);
		public override void visit_page (Valadoc.Content.Page element);
		public override void visit_paragraph (Valadoc.Content.Paragraph element);
		public override void visit_run (Valadoc.Content.Run element);
		public override void visit_source_code (Valadoc.Content.SourceCode element);
		public override void visit_symbol_link (Valadoc.Content.SymbolLink element);
		public override void visit_table (Valadoc.Content.Table element);
		public override void visit_table_cell (Valadoc.Content.TableCell element);
		public override void visit_table_row (Valadoc.Content.TableRow element);
		public override void visit_text (Valadoc.Content.Text element);
		public override void visit_warning (Valadoc.Content.Warning element);
		public override void visit_wiki_link (Valadoc.Content.WikiLink element);
		public void write_docbook_link (Valadoc.Api.Item item);
		public void write_symbol_link (Valadoc.Content.SymbolLink element);
		public string content { get; }
	}
	/**
	 * Simple reader for a subset of XML.
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class MarkupReader : GLib.Object {
		public MarkupReader (string filename, Valadoc.ErrorReporter reporter);
		public MarkupReader.from_string (string filename, string content, Valadoc.ErrorReporter reporter);
		public string? get_attribute (string attr);
		public Gee.Map<string,string> get_attributes ();
		public string? get_line_content (int line_nr);
		public Valadoc.MarkupTokenType read_token (out Valadoc.MarkupSourceLocation token_begin, out Valadoc.MarkupSourceLocation token_end);
		public string content { get; private set; }
		public string filename { get; private set; }
		public string name { get; private set; }
	}
	/**
	 * Writes markups and text to a file.
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class MarkupWriter {
		/**
		 * Writes text to a desination like a {@link GLib.StringBuilder} or a {@link GLib.FileStream}
		 */
		public delegate void WriteFunc (string text);
		protected long current_column;
		protected int indent;
		protected bool last_was_tag;
		protected Valadoc.MarkupWriter.WriteFunc write;
		/**
		 * Initializes a new instance of the MarkupWriter
		 * 
		 * @param write stream a WriteFunc
		 * @param xml_declaration specifies whether this file starts with an xml-declaration
		 */
		public MarkupWriter (owned Valadoc.MarkupWriter.WriteFunc write, bool xml_declaration = true);
		protected virtual bool content_inline_element (string name);
		protected void do_write (string text);
		/**
		 * Writes an end tag of a markup element to the file
		 *
		 * @param name the name of the markup
		 * @return this
		 */
		public Valadoc.MarkupWriter end_tag (string name);
		public static string escape (string txt);
		protected virtual bool inline_element (string name);
		/**
		 * Writes the specified string to the output stream
		 *
		 * @see text
		 * @return this
		 */
		public Valadoc.MarkupWriter raw_text (string text);
		public void set_wrap (bool wrap);
		/**
		 * Writes a simple tag (<name />) to the file
		 *
		 * @param name the name of the markup
		 * @param attributes a list of name/value pairs
		 * @return this
		 */
		public Valadoc.MarkupWriter simple_tag (string name, string[]? attributes = null);
		/**
		 * Writes an start tag of a markup element to the file
		 *
		 * @param name the name of the markup
		 * @param attributes a list of name/value pairs
		 * @return this
		 */
		public Valadoc.MarkupWriter start_tag (string name, string[]? attributes = null);
		/**
		 * Writes the specified string to the output stream
		 *
		 * @see raw_text
		 * @return this
		 */
		public Valadoc.MarkupWriter text (string text);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class ModuleLoader : GLib.Object {
		public Valadoc.Doclet? create_doclet (string _path);
		public Valadoc.Driver? create_driver (string _path);
		public Valadoc.Content.Taglet? create_taglet (string keyword);
		public static string get_doclet_path (string? docletpath, Valadoc.ErrorReporter reporter);
		public static string? get_driver_path (string? _driverpath, Valadoc.ErrorReporter reporter);
		public static Valadoc.ModuleLoader get_instance ();
		public static bool is_doclet (string path);
		public static bool is_driver (string path);
		public void register_taglet (string keyword, GLib.Type type);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Parser : Valadoc.ParserCallback {
		public Parser (Valadoc.Settings settings, Valadoc.Scanner scanner, Valadoc.ErrorReporter reporter);
		public void accept_token (Valadoc.Token token) throws Valadoc.ParserError;
		public void parse (string content, string filename, int first_line, int first_column) throws Valadoc.ParserError;
		public void set_root_rule (Valadoc.Rule root_rule);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public abstract class Rule : GLib.Object {
		public enum Forward {
			NONE,
			PARENT,
			CHILD
		}
		public delegate void Action () throws Valadoc.ParserError;
		protected Rule ();
		public abstract bool accept_token (Valadoc.Token token, Valadoc.ParserCallback parser, Valadoc.Rule.Forward forward) throws Valadoc.ParserError;
		protected void do_reduce (Valadoc.ParserCallback parser) throws Valadoc.ParserError;
		protected void do_skip (Valadoc.ParserCallback parser) throws Valadoc.ParserError;
		protected void do_start (Valadoc.ParserCallback parser) throws Valadoc.ParserError;
		protected bool has_start_token (GLib.Object? scheme_element, Valadoc.Token token);
		public abstract bool is_optional ();
		protected bool is_optional_rule (GLib.Object? scheme_element);
		public static Valadoc.Rule many (GLib.Object[] scheme);
		public static Valadoc.Rule one_of (GLib.Object[] scheme);
		public static Valadoc.Rule option (GLib.Object[] scheme);
		public static Valadoc.Rule seq (GLib.Object[] scheme);
		public Valadoc.Rule set_name (string name);
		public Valadoc.Rule set_reduce (Valadoc.Rule.Action action);
		public Valadoc.Rule set_skip (Valadoc.Rule.Action action);
		public Valadoc.Rule set_start (Valadoc.Rule.Action action);
		public abstract bool starts_with_token (Valadoc.Token token);
		public abstract string to_string (GLib.Object? state);
		protected bool try_to_apply (GLib.Object? scheme_element, Valadoc.Token token, Valadoc.ParserCallback parser, out bool handled) throws Valadoc.ParserError;
		public abstract bool would_accept_token (Valadoc.Token token, GLib.Object? state);
		public abstract bool would_reduce (Valadoc.Token token, GLib.Object? state);
		public string name { get; }
	}
	/**
	 * Contains information about output settings configuration
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Settings : GLib.Object {
		/**
		 * Add internal elements to documentation
		 */
		public bool _internal;
		/**
		 * Add private elements to documentation
		 */
		public bool _private;
		/**
		 * Add protected elements to documentation
		 */
		public bool _protected;
		public bool add_inherited;
		/**
		 * Alternative paths for resources
		 */
		public string[] alternative_resource_dirs;
		/**
		 * Base source directory.
		 */
		public string? basedir;
		/**
		 * A list of defined symbols.
		 */
		public string[] defines;
		/**
		 * Output directory/file name.
		 */
		public string? directory;
		/**
		 * Do not warn when using experimental features.
		 */
		public bool experimental;
		/**
		 * Enable experimental enhancements for non-null types.
		 */
		public bool experimental_non_null;
		/**
		 * A list of all gir directories.
		 */
		public string[] gir_directories;
		/**
		 * GObject-Introspection directory
		 */
		public string? gir_directory;
		/**
		 * GObject-Introspection repository file name
		 */
		public string? gir_name;
		public string gir_namespace;
		public string gir_version;
		/**
		 * A list of all metadata directories
		 */
		public string[] metadata_directories;
		/**
		 * A list of all packages
		 */
		public string[] packages;
		/**
		 * Output directory/file name.
		 */
		public string path;
		/**
		 * Package name
		 */
		public string pkg_name;
		/**
		 * Package version
		 */
		public string pkg_version;
		/**
		 * Plugin-specific command line arguments
		 */
		public string[] pluginargs;
		/**
		 * Use the given profile (dova, gobject, posix, ...) instead of the defaul
		 */
		public string? profile;
		/**
		 * A list of all source files.
		 */
		public string[] source_files;
		/**
		 * GLib version to target.
		 */
		public string target_glib;
		/**
		 * List of directories where to find .vapi files.
		 */
		public string[] vapi_directories;
		/**
		 * Show all warnings
		 */
		public bool verbose;
		/**
		 * Wiki directory
		 */
		public string wiki_directory;
		/**
		 * Add dependencies to the documentation
		 */
		public bool with_deps;
		public Settings ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class StubRule : Valadoc.Rule {
		public StubRule ();
		public override bool accept_token (Valadoc.Token token, Valadoc.ParserCallback parser, Valadoc.Rule.Forward forward) throws Valadoc.ParserError;
		public override bool is_optional ();
		public Valadoc.Rule set_rule (Valadoc.Rule rule);
		public override bool starts_with_token (Valadoc.Token token);
		public override string to_string (GLib.Object? state);
		public override bool would_accept_token (Valadoc.Token token, GLib.Object? state);
		public override bool would_reduce (Valadoc.Token token, GLib.Object? state);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class Token : GLib.Object {
		public Token ();
		public Token.from_type (Valadoc.TokenType type, Valadoc.SourceLocation begin, Valadoc.SourceLocation end, string? val = null);
		public Token.from_word (string word, Valadoc.SourceLocation begin, Valadoc.SourceLocation end);
		public int to_int ();
		public string to_pretty_string ();
		public string to_string ();
		public Valadoc.SourceLocation begin { get; }
		public Valadoc.SourceLocation end { get; }
		public bool is_number { get; }
		public bool is_word { get; }
		public Valadoc.TokenType? token_type { get; }
		public string? value { get; }
		public string? word { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class TokenType : GLib.Object {
		public delegate void Action (Valadoc.Token token) throws Valadoc.ParserError;
		public static Valadoc.TokenType ALIGN_BOTTOM;
		public static Valadoc.TokenType ALIGN_CENTER;
		public static Valadoc.TokenType ALIGN_RIGHT;
		public static Valadoc.TokenType ALIGN_TOP;
		public static Valadoc.TokenType ANY;
		public static Valadoc.TokenType ANY_NUMBER;
		public static Valadoc.TokenType ANY_WORD;
		public static Valadoc.TokenType AROBASE;
		public static Valadoc.TokenType BACK_QUOTE_2;
		public static Valadoc.TokenType BREAK;
		public static Valadoc.TokenType CLOSED_BRACE;
		public static Valadoc.TokenType DOUBLE_CLOSED_BRACE;
		public static Valadoc.TokenType DOUBLE_CLOSED_BRACKET;
		public static Valadoc.TokenType DOUBLE_OPEN_BRACE;
		public static Valadoc.TokenType DOUBLE_OPEN_BRACKET;
		public static Valadoc.TokenType DOUBLE_PIPE;
		public static Valadoc.TokenType EOF;
		public static Valadoc.TokenType EOL;
		public static Valadoc.TokenType EQUAL_1;
		public static Valadoc.TokenType EQUAL_2;
		public static Valadoc.TokenType EQUAL_3;
		public static Valadoc.TokenType EQUAL_4;
		public static Valadoc.TokenType EQUAL_5;
		public static Valadoc.TokenType GREATER_THAN;
		public static Valadoc.TokenType LESS_THAN;
		public static Valadoc.TokenType MARKDOWN_ANY_WORD;
		public static Valadoc.TokenType MARKDOWN_BLOCK_END;
		public static Valadoc.TokenType MARKDOWN_BLOCK_START;
		public static Valadoc.TokenType MARKDOWN_CLOSE_BRACKET;
		public static Valadoc.TokenType MARKDOWN_CLOSE_PARENS;
		public static Valadoc.TokenType MARKDOWN_CONSTANT;
		public static Valadoc.TokenType MARKDOWN_EOC;
		public static Valadoc.TokenType MARKDOWN_EXCLAMATION_MARK;
		public static Valadoc.TokenType MARKDOWN_FUNCTION;
		public static Valadoc.TokenType MARKDOWN_GREATER_THAN;
		public static Valadoc.TokenType MARKDOWN_HEADLINE_1;
		public static Valadoc.TokenType MARKDOWN_HEADLINE_2;
		public static Valadoc.TokenType MARKDOWN_HEADLINE_END;
		public static Valadoc.TokenType MARKDOWN_HEADLINE_HASH;
		public static Valadoc.TokenType MARKDOWN_LESS_THAN;
		public static Valadoc.TokenType MARKDOWN_LINK;
		public static Valadoc.TokenType MARKDOWN_LOCAL_GMEMBER;
		public static Valadoc.TokenType MARKDOWN_MAIL;
		public static Valadoc.TokenType MARKDOWN_OPEN_BRACKET;
		public static Valadoc.TokenType MARKDOWN_OPEN_PARENS;
		public static Valadoc.TokenType MARKDOWN_ORDERED_LIST_ITEM_END;
		public static Valadoc.TokenType MARKDOWN_ORDERED_LIST_ITEM_START;
		public static Valadoc.TokenType MARKDOWN_PARAGRAPH;
		public static Valadoc.TokenType MARKDOWN_PARAMETER;
		public static Valadoc.TokenType MARKDOWN_SOURCE;
		public static Valadoc.TokenType MARKDOWN_SPACE;
		public static Valadoc.TokenType MARKDOWN_SYMBOL;
		public static Valadoc.TokenType MARKDOWN_UNORDERED_LIST_ITEM_END;
		public static Valadoc.TokenType MARKDOWN_UNORDERED_LIST_ITEM_START;
		public static Valadoc.TokenType MINUS;
		public static Valadoc.TokenType OPEN_BRACE;
		public static Valadoc.TokenType PIPE;
		public static Valadoc.TokenType SINGLE_QUOTE_2;
		public static Valadoc.TokenType SLASH_2;
		public static Valadoc.TokenType SPACE;
		public static Valadoc.TokenType TAB;
		public static Valadoc.TokenType TRIPLE_CLOSED_BRACE;
		public static Valadoc.TokenType TRIPLE_OPEN_BRACE;
		public static Valadoc.TokenType UNDERSCORE_2;
		public static Valadoc.TokenType VALADOC_ANY_WORD;
		public static Valadoc.TokenType VALADOC_COMMENT_END;
		public static Valadoc.TokenType VALADOC_COMMENT_START;
		public static Valadoc.TokenType VALADOC_EOL;
		public static Valadoc.TokenType VALADOC_SPACE;
		public static Valadoc.TokenType VALADOC_TAB;
		public Valadoc.TokenType action (Valadoc.TokenType.Action action);
		public static Valadoc.TokenType any ();
		public static Valadoc.TokenType any_number ();
		public static Valadoc.TokenType any_word ();
		public void do_action (Valadoc.Token matched_token) throws Valadoc.ParserError;
		public bool matches (Valadoc.Token token);
		public static Valadoc.TokenType str (string str);
		public string to_pretty_string ();
		public string to_string ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class WikiPage : GLib.Object, Valadoc.Documentation {
		public WikiPage (string name, string path, Valadoc.Api.Package package);
		public void parse (Valadoc.DocumentationParser docparser, Valadoc.Api.Package pkg);
		public void read (Valadoc.ErrorReporter reporter);
		public Valadoc.Content.Page documentation { get; protected set; }
		public string documentation_str { get; private set; }
		public string name { get; private set; }
		public string path { get; private set; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class WikiPageTree : GLib.Object {
		public WikiPageTree ();
		public void check (Valadoc.Settings settings, Valadoc.DocumentationParser docparser, Valadoc.Api.Package pkg);
		public Gee.Collection<Valadoc.WikiPage> get_pages ();
		public void parse (Valadoc.Settings settings, Valadoc.DocumentationParser docparser, Valadoc.Api.Package package, Valadoc.ErrorReporter reporter);
		public Valadoc.WikiPage? search (string name);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public class WikiScanner : GLib.Object, Valadoc.Scanner {
		public WikiScanner (Valadoc.Settings settings);
		protected virtual void accept (unichar c) throws Valadoc.ParserError;
		public int get_line ();
		public virtual string get_line_content ();
		public virtual int get_line_start_column ();
		protected unichar get_next_char (int offset = 1);
		public virtual void reset ();
		public void set_code_escape_mode (bool escape_mode);
		public void set_url_escape_mode (bool escape_mode);
		public virtual void stop ();
	}
	/**
	 * Provides a mechanism to inspect the API & documentation of programs and libraries
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface Doclet : GLib.Object {
		/**
		 * Allows the doclet to inspect the given {@link Api.Tree}
		 *
		 * @param settings various configurations
		 * @param tree the tree to inspect
		 * @param reporter the reporter to use
		 * @see Content.ContentVisitor
		 * @see Api.Visitor
		 */
		public abstract void process (Valadoc.Settings settings, Valadoc.Api.Tree tree, Valadoc.ErrorReporter reporter);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface Documentation : GLib.Object {
		/**
		 * The corresponding file name
		 */
		public abstract string? get_filename ();
		/**
		 * The corresponding package
		 */
		public abstract Valadoc.Api.Package? package { get; }
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface Driver : GLib.Object {
		public abstract Valadoc.Api.Tree? build (Valadoc.Settings settings, Valadoc.ErrorReporter reporter);
		public abstract void write_gir (Valadoc.Settings settings, Valadoc.ErrorReporter reporter);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ParserCallback {
		public abstract void error (Valadoc.Token? token, string message) throws Valadoc.ParserError;
		public abstract GLib.Object? get_rule_state ();
		public abstract void push_rule (Valadoc.Rule rule);
		public abstract void reduce ();
		public abstract void set_rule_state (GLib.Object state);
		public abstract void warning (Valadoc.Token? token, string message);
		public abstract bool would_parent_accept_token (Valadoc.Token token);
		public abstract bool would_parent_reduce_to_rule (Valadoc.Token token, Valadoc.Rule rule);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface ResourceLocator : GLib.Object {
		public abstract string resolve (string path);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public interface Scanner : GLib.Object {
		public abstract void end () throws Valadoc.ParserError;
		public abstract string get_line_content ();
		public abstract void reset ();
		public abstract void scan (string content) throws Valadoc.ParserError;
		public abstract void set_parser (Valadoc.Parser parser);
		public abstract void stop ();
	}
	/**
	 * Represents a position in a source file.
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public struct MarkupSourceLocation {
		public char* pos;
		public int line;
		public int column;
		public MarkupSourceLocation (char* _pos, int _line, int _column);
	}
	/**
	 * Represents a position in a source file.
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public struct SourceLocation {
		public int line;
		public int column;
		public SourceLocation (int _line, int _column);
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public enum MarkupTokenType {
		NONE,
		COMMENT,
		START_ELEMENT,
		END_ELEMENT,
		TEXT,
		EOF;
		public string to_string ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public enum MethodBindingType {
		UNMODIFIED,
		OVERRIDE,
		ABSTRACT,
		VIRTUAL,
		INLINE,
		STATIC;
		public string to_string ();
	}
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public errordomain ParserError {
		INTERNAL_ERROR,
		UNEXPECTED_TOKEN
	}
	/**
	 * A plugin register function for doclets
	 *
	 * @see ModuleLoader
	 */
	[CCode (cheader_filename = "valadoc-1.0.h", has_target = false)]
	public delegate GLib.Type DocletRegisterFunction (Valadoc.ModuleLoader module_loader);
	/**
	 * A plugin register function for drivers
	 *
	 * @see ModuleLoader
	 */
	[CCode (cheader_filename = "valadoc-1.0.h", has_target = false)]
	public delegate GLib.Type DriverRegisterFunction (Valadoc.ModuleLoader module_loader);
	[CCode (cheader_filename = "valadoc-1.0.h", has_target = false)]
	public delegate void TagletRegisterFunction (Valadoc.ModuleLoader loader);
	[CCode (cheader_filename = "valadoc-1.0.h", cname = "PACKAGE_ICONDIR", cprefix = "")]
	public const string icons_dir;
	/**
	 * Makes a copy of the directory src to dest. 
	 *
	 * @param src the directory to copy
	 * @param dest the destination path
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static bool copy_directory (string src, string dest);
	/**
	 * Makes a copy of the file src to dest. 
	 *
	 * @param src the file to copy
	 * @param dest the destination path
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static bool copy_file (string src, string dest);
	/**
	 * Returns canonicalized absolute pathname
	 *
	 * @param name the path being checked
	 * @return a canonicalized absolute pathname
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static string realpath (string name);
	/**
	 * A recursive directory delete function
	 *
	 * @param rpath the directory to remove
	 */
	[CCode (cheader_filename = "valadoc-1.0.h")]
	public static bool remove_directory (string rpath);
}
